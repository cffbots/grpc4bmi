matrix:
    include:
      - language: python
        dist: xenial
        python: '3.6'
        install:
            - pip install -r requirements.txt
            - python setup.py install
            - docker pull ewatercycle/walrus-grpc4bmi:v0.2.0
            - singularity pull docker://ewatercycle/walrus-grpc4bmi:v0.2.0
        script:
            - pytest
        cache:
         - pip
         - directories:
             - /usr/local
             - ~/.singularity
        services:
          - docker
        before_install:
          # Build singularity binary
          - |
              if [[ ! -f /usr/local/bin/singularity ]]; then
                sudo apt-get update
                sudo apt-get install -y build-essential libssl-dev uuid-dev libgpgme11-dev libseccomp-dev pkg-config squashfs-tools
                wget -O /tmp/go1.12.linux-amd64.tar.gz https://dl.google.com/go/go1.12.linux-amd64.tar.gz
                sudo tar -C /usr/local -xzf /tmp/go1.12.linux-amd64.tar.gz
                export GOPATH=~/go
                export PATH=$PATH:/usr/local/go/bin
                mkdir -p ~/go/src/github.com/sylabs
                cd ~/go/src/github.com/sylabs && \
                git clone https://github.com/sylabs/singularity.git && \
                cd singularity
                git checkout v3.1.0
                ./mconfig && \
                cd ./builddir && \
                make && \
                sudo make install
                cd ${TRAVIS_BUILD_DIR}
              fi
      - language: cpp
        before_install:
            - git submodule update --init
            - sudo apt-get update
            - sudo apt-get install -y build-essential autoconf libtool pkg-config
            - | 
                if [[ ! -f /usr/local/bin/protoc || ! -f /usr/local/bin/grpc_cpp_plugin ]]; then
                  git clone -b $(curl -L https://grpc.io/release) https://github.com/grpc/grpc
                  cd grpc
                  git submodule update --init --recursive
                  sudo make -j4 install
                  cd third_party/protobuf
                  sudo make -j4 install
                  cd ${TRAVIS_BUILD_DIR}
                else
                  echo "using cached builds of protobuf and grpc"
                fi
                cd ${TRAVIS_BUILD_DIR}/cpp/bmi-c && mkdir -p build && cd build
                cmake .. && sudo make install
        script:
            - mkdir -p ${TRAVIS_BUILD_DIR}/cpp/build && cd ${TRAVIS_BUILD_DIR}/cpp/build
            - cmake ..
            - make
            - ctest -V
        cache:
            directories:
                - /usr/local
